FOR SEQUENCE AND PSEUDOCODE BASIC CONFIGURATIONS AND BASIC STRUCTURE 

@startuml CreateNotesScreen-Sequence-Pseudo
!define POSITIVERESPONSE 90EE90
!define NEGATIVEERESPONSE EFBBBB
!define NUETRALRESPONSE F2DC79

skinparam sequence{
    ParticipantBackgroundColor #A7BEAE
    LifeLineBackgroundColor #E7E8D1
    LifeLineBorderColor #2C5F2D
    ActorBackgroundColor #FC766AFF
    ActorBorderColor #FC766AFF
    ArrowColor #B85042
    ArrowFontColor #234E70
}

title 'CreateNotesScreen Sequence diagram and pseudo code - initState '
autonumber 1
hide footbox
participant User as U
participant HomeScreen as S
participant HomeScreenVM as SVM
U -> S : Invokes **initState()**
activate U  
activate S
alt TRY
    S -> S : Start the stream "navigationStream" to listen
    alt #POSITIVERESPONSE if(event == NavigatorPush)
        S -> S : push to page from **event.pageConfig** with data **event.data**
            alt #POSITIVERESPONSE if(User clicks on the Create Notes button)
                S --> U : Display the CreateNotes screen to the user.
            end
            alt #POSITIVERESPONSE if(User clicks on the Retrive Notes button)
                S --> U : Display the NotesList screen to the user.
            end
    end
    deactivate U
    deactivate S
else CATCH
    S -> S : write log Exceptions
    S --> U : Returns
    deactivate U
    deactivate S
end


==PSEUDOCODE - initState()==
hnote across

    ADD listener to the **navigationStream** and listen to the events in the stream 

    IF **event == NavigatorPush**

        Using **context.push** set the value for **pageConfig** as **event.pageConfig** and value for **data** as **event.data** and navigate to the respective page

end hnote





newpage dispose() method
autonumber 1
hide footbox
U -> S : Invokes **dispose()**
activate U
activate S
S -> SVM : Invokes **disposeStreams()**
activate SVM
SVM --> S : Returns
deactivate SVM
S --> U : Returns
deactivate S
deactivate U 
==PSEUDOCODE - dispose()==
hnote across

    INVOKE **disposeStreams()** 

hnote end 


@enduml